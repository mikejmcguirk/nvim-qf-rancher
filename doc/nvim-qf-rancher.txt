==============================================================================
Error list husbandry                                       *nvim-qf-rancher.txt*

Nvim Quickfix Rancher provides a stable of tools for taming the quickfix
and location lists:
- Auto opening, closing, and resizing of list windows at logical points
  and across tabpages
- Wrapping and convenience functions for list and stack navigation
- Autocommands to stop automatic copying of location lists to new windows,
  as well as putting location lists without a home window out to pasture
- Preview window for list items
- Built-in functions for lassoing diagnostics by all severities, including
  highest only
- Filter and sort functions
- A variey of grep functions built on rg as a default, with grep available
  as a backup
- Capabilities are extensible and available from the cmd line

==============================================================================
Installation                                           *qf-rancher-installation*

==============================================================================
Configuration                                                       *qfr-config*

Qfr is configured using vim.g variables. For lazy.nvim users, make sure to
set thse in the "init" section of your plugin spec

qfr_auto_center_result                                  *qfr_auto_center_result*

    (Default true) Qfr commands will auto-center opened buffers

    Type: ~
        string


qfr_auto_open_changes                                    *qfr_auto_open_changes*

    (Default true) Always open the list when its contents are changed

    Type: ~
        boolean


qfr_auto_list_height                                      *qfr_auto_list_height*

    (Default true) When the list is opened, its contents changed, or the
    stack number changed, re-size it to match the amount of entries. Max
    automatic height is 10

    Type: ~
        boolean


qfr_close_on_stack_clear                              *qfr_close_on_stack_clear*

    (Default true) Automatically close the list if the entire stack is cleared

    Type: ~
        boolean


qfr_create_loclist_autocmds                        *qfr_create_loclist_autocmds*

    (Default true) On startup, create autocmds to manage the following:
    - Prevent split windows from inheriting the original window's location
      list
    - When a non-list window is closed, automatically close and clear its
      associated location lists
    These autocmds are contained in the augroup "qfr-loclist-group"

    Type: ~
        boolean


qfr_debug_assertions                                      *qfr_debug_assertions*

    (Default false) Enables extra type checking and logical assertions. This
    can affect performance, as individual list items will have extra
    validation

    Type: ~
        boolean


qfr_save_views                                                  *qfr_save_views*

    (Default true) Save views of other windows in the same tab when
    the list is open, closed, or resized. This option is ignored if
    splitkeep is set for screen or topline

    Type: ~
        boolean


Qf Rancher provides a qf.lua ftplugin file to customize list behavior
TODO: ref ftplugin section
Customize which ftplugin features to use with the options below

qfr_ftplugin_demap                                          *qfr_ftplugin_demap*

    (Default true) Disable the following defaults in lists:
    - <C-w>s (split)
    - <C-w>v (vsplit)
    - <C-i> / <C-o> (jumplist navigation)

    Type: ~
        boolean


qfr_ftplugin_keymap                                        *qfr_ftplugin_keymap*

    (Default true) Set ftplugin list keymaps
    TODO: Reference ftplugin section
    TODO: Note that these are the ack style maps + other lineage

    Type: ~
        boolean


qfr_ftplugin_set_opts                                    *qfr_ftplugin_set_opts*

    (Default true) Set the following options in lists:
    - buflisted = false
    - colorcolumn = ""
    - list = false
    - spell = false

    Type: ~
        boolean


qfr_grepprg                                                        *qfr_grepprg*

    (Default "rg") Set the grepprg used for Rancher's grep functions
    "rg" and "grep" are available

    Type: ~
        string


Control the preview window with the options below
TODO: link to preview win section

qfr_preview_border                                          *qfr_preview_border*

    (Default "single") Set the preview window border. See :h 'winborder' for
    more info

    Variants: ~
        ("")
        ("bold")
        ("double")
        ("none")
        ("rounded")
        ("shadow")
        ("single")
        ("solid")
        ("An eight element string[] table")


qfr_preview_debounce                                      *qfr_preview_debounce*

    (Default 100) Minimum interval in ms between preview window updates
    The default is 100 to accomodate slower systems/HDs. On a reasonable
    system, it should be possible to go down to 50ms before flicker/stutter
    start to appear. This behavior also depends on the size of the file(s)
    being scrolled through

    Type: ~
        string


qfr_preview_show_title                                  *qfr_preview_show_title*

    (Default true) Show title in the preview window

    Type: ~
        string


qfr_preview_title_pos                                    *qfr_preview_title_pos*

    (Default "left") If show_title is true, control where it shows

    Type: ~
        string


qfr_preview_winblend                                      *qfr_preview_winblend*

    (Default 0) Set the winblend of the preview win (see :h winblend)

    Type: ~
        integer


qfr_qfsplit                                                        *qfr_qfsplit*

    (Default "botright") Set the split the quickfix list opens to

    Variants: ~
        ("aboveleft")
        ("belowright")
        ("topleft")
        ("botright")


qfr_reuse_title                                                *qfr_reuse_title*

    (Default true) When running a Qfr cmd to gather new entries, look for
    destination lists to re-use based on title

    Type: ~
        boolean


qfr_set_default_cmds                                      *qfr_set_default_cmds*

    (Default true) Create Qfr's default commands

    Type: ~
        boolean


qfr_set_default_maps                                      *qfr_set_default_maps*

    (Default true) Set default keymaps (excluding ftplugin maps)
    TODO: link to default keymaps section

    Type: ~
        string


==============================================================================
Open, close, and resize list wins                                         *Open*

Open.open_qflist_cmd({cargs})                             *Open.open_qflist_cmd*

    Parameters: ~
        {cargs}  (vim.api.keyset.create_user_command.command_args)

    Returns: ~
        (nil)


Open.open_loclist_cmd({cargs})                           *Open.open_loclist_cmd*

    Parameters: ~
        {cargs}  (vim.api.keyset.create_user_command.command_args)

    Returns: ~
        (nil)


Open.close_qflist_cmd()                                  *Open.close_qflist_cmd*

    Returns: ~
        (nil)


Open.close_loclist_cmd()                                *Open.close_loclist_cmd*

    Returns: ~
        (nil)


Open.toggle_qflist_cmd({cargs})                         *Open.toggle_qflist_cmd*

    Parameters: ~
        {cargs}  (vim.api.keyset.create_user_command.command_args)

    Returns: ~
        (nil)


Open.toggle_loclist_cmd({cargs})                       *Open.toggle_loclist_cmd*

    Parameters: ~
        {cargs}  (vim.api.keyset.create_user_command.command_args)

    Returns: ~
        (nil)


==============================================================================
Qf Rancher Keymaps                                          *qf-rancher-keymaps*


Modes: { n }, Plug: <Plug>(qfr-open-qf-list), Default: <leader>qp
 Desc: Open the quickfix list

Modes: { n }, Plug: <Plug>(qfr-open-qf-list-max), Default: <leader>qP
 Desc: Open the quickfix list to max height

Modes: { n }, Plug: <Plug>(qfr-close-qf-list), Default: <leader>qo
 Desc: Close the quickfix list

Modes: { n }, Plug: <Plug>(qfr-toggle-qf-list), Default: <leader>qq
 Desc: Toggle the quickfix list

Modes: { n }, Plug: <Plug>(qfr-open-loclist), Default: <leader>lp
 Desc: Open the location list

Modes: { n }, Plug: <Plug>(qfr-open-loclist-max), Default: <leader>lP
 Desc: Open the location list to max height

Modes: { n }, Plug: <Plug>(qfr-close-loclist), Default: <leader>lo
 Desc: Close the location list

Modes: { n }, Plug: <Plug>(qfr-toggle-loclist), Default: <leader>ll
 Desc: Toggle the location list

Modes: { n, x }, Plug: <Plug>(qfr-grep-cwd), Default: <leader>qgd
 Desc: Qgrep CWD (vimcase)

Modes: { n, x }, Plug: <Plug>(qfr-grep-cwdX), Default: <leader>qgD
 Desc: Qgrep CWD (regex)

Modes: { n, x }, Plug: <Plug>(qfr-grep-help), Default: <leader>qgh
 Desc: Qgrep help (vimcase)

Modes: { n, x }, Plug: <Plug>(qfr-grep-helpX), Default: <leader>qgH
 Desc: Qgrep help (regex)

Modes: { n, x }, Plug: <Plug>(qfr-lgrep-cwd), Default: <leader>lgd
 Desc: Lgrep CWD (vimcase)

Modes: { n, x }, Plug: <Plug>(qfr-lgrep-cwdX), Default: <leader>lgD
 Desc: Lgrep CWD (regex)

Modes: { n, x }, Plug: <Plug>(qfr-lgrep-help), Default: <leader>lgh
 Desc: Lgrep help (vimcase)

Modes: { n, x }, Plug: <Plug>(qfr-lgrep-helpX), Default: <leader>lgH
 Desc: Lgrep help (regex)

Modes: { n, x }, Plug: <Plug>(qfr-grep-bufs), Default: <leader>qgu
 Desc: Qgrep open bufs (vimcase)

Modes: { n, x }, Plug: <Plug>(qfr-grep-bufsX), Default: <leader>qgU
 Desc: Qgrep open bufs (regex)

Modes: { n, x }, Plug: <Plug>(qfr-lgrep-cbuf), Default: <leader>lgu
 Desc: Lgrep cur buf (vimcase)

Modes: { n, x }, Plug: <Plug>(qfr-lgrep-cbufX), Default: <leader>lgU
 Desc: Lgrep cur buf (regex)

Modes: { n }, Plug: <Plug>(qfr-Qdiags-hint), Default: <leader>qin
 Desc: All buffer diagnostics min hint

Modes: { n }, Plug: <Plug>(qfr-Qdiags-info), Default: <leader>qif
 Desc: All buffer diagnostics min info

Modes: { n }, Plug: <Plug>(qfr-Qdiags-warn), Default: <leader>qiw
 Desc: All buffer diagnostics min warn

Modes: { n }, Plug: <Plug>(qfr-Qdiags-error), Default: <leader>qie
 Desc: All buffer diagnostics min error

Modes: { n }, Plug: <Plug>(qfr-Qdiags-top), Default: <leader>qit
 Desc: All buffer diagnostics top severity

Modes: { n }, Plug: <Plug>(qfr-Qdiags-HINT), Default: <leader>qiN
 Desc: All buffer diagnostics only hint

Modes: { n }, Plug: <Plug>(qfr-Qdiags-INFO), Default: <leader>qiF
 Desc: All buffer diagnostics only info

Modes: { n }, Plug: <Plug>(qfr-Qdiags-WARN), Default: <leader>qiW
 Desc: All buffer diagnostics only warn

Modes: { n }, Plug: <Plug>(qfr-Qdiags-ERROR), Default: <leader>qiE
 Desc: All buffer diagnostics only error

Modes: { n }, Plug: <Plug>(qfr-Ldiags-hint), Default: <leader>lin
 Desc: Cur buf diagnostics min hint

Modes: { n }, Plug: <Plug>(qfr-Ldiags-info), Default: <leader>lif
 Desc: Cur buf diagnostics min info

Modes: { n }, Plug: <Plug>(qfr-Ldiags-warn), Default: <leader>liw
 Desc: Cur buf diagnostics min warn

Modes: { n }, Plug: <Plug>(qfr-Ldiags-error), Default: <leader>lie
 Desc: Cur buf diagnostics min error

Modes: { n }, Plug: <Plug>(qfr-Ldiags-top), Default: <leader>lit
 Desc: Cur buf diagnostics top severity

Modes: { n }, Plug: <Plug>(qfr-Ldiags-HINT), Default: <leader>liN
 Desc: Cur buf diagnostics only hint

Modes: { n }, Plug: <Plug>(qfr-Ldiags-INFO), Default: <leader>liF
 Desc: Cur buf diagnostics only info

Modes: { n }, Plug: <Plug>(qfr-Ldiags-WARN), Default: <leader>liW
 Desc: Cur buf diagnostics only warn

Modes: { n }, Plug: <Plug>(qfr-Ldiags-ERROR), Default: <leader>liE
 Desc: Cur buf diagnostics only error

Modes: { n, x }, Plug: <Plug>(qfr-Qfilter-cfilter), Default: <leader>qkl
 Desc: Qfilter cfilter (vimcase)

Modes: { n, x }, Plug: <Plug>(qfr-Qfilter!-cfilter), Default: <leader>qrl
 Desc: Qfilter! cfilter (vimcase)

Modes: { n, x }, Plug: <Plug>(qfr-Qfilter-cfilterX), Default: <leader>qkL
 Desc: Qfilter cfilter (regex)

Modes: { n, x }, Plug: <Plug>(qfr-Qfilter!-cfilterX), Default: <leader>qrL
 Desc: Qfilter! cfilter (regex)

Modes: { n, x }, Plug: <Plug>(qfr-Lfilter-cfilter), Default: <leader>lkl
 Desc: Lfilter cfilter (vimcase)

Modes: { n, x }, Plug: <Plug>(qfr-Lfilter!-cfilter), Default: <leader>lrl
 Desc: Lfilter! cfilter (vimcase)

Modes: { n, x }, Plug: <Plug>(qfr-Lfilter-cfilterX), Default: <leader>lkL
 Desc: Lfilter cfilter (regex)

Modes: { n, x }, Plug: <Plug>(qfr-Lfilter!-cfilterX), Default: <leader>lrL
 Desc: Lfilter! cfilter (regex)

Modes: { n, x }, Plug: <Plug>(qfr-Qfilter-fname), Default: <leader>qkf
 Desc: Qfilter fname (vimcase)

Modes: { n, x }, Plug: <Plug>(qfr-Qfilter!-fname), Default: <leader>qrf
 Desc: Qfilter! fname (vimcase)

Modes: { n, x }, Plug: <Plug>(qfr-Qfilter-fnameX), Default: <leader>qkF
 Desc: Qfilter fname (regex)

Modes: { n, x }, Plug: <Plug>(qfr-Qfilter!-fnameX), Default: <leader>qrF
 Desc: Qfilter! fname (regex)

Modes: { n, x }, Plug: <Plug>(qfr-Lfilter-fname), Default: <leader>lkf
 Desc: Lfilter fname (vimcase)

Modes: { n, x }, Plug: <Plug>(qfr-Lfilter!-fname), Default: <leader>lrf
 Desc: Lfilter! fname (vimcase)

Modes: { n, x }, Plug: <Plug>(qfr-Lfilter-fnameX), Default: <leader>lkF
 Desc: Lfilter fname (regex)

Modes: { n, x }, Plug: <Plug>(qfr-Lfilter!-fnameX), Default: <leader>lrF
 Desc: Lfilter! fname (regex)

Modes: { n, x }, Plug: <Plug>(qfr-Qfilter-text), Default: <leader>qke
 Desc: Qfilter text (vimcase)

Modes: { n, x }, Plug: <Plug>(qfr-Qfilter!-text), Default: <leader>qre
 Desc: Qfilter! text (vimcase)

Modes: { n, x }, Plug: <Plug>(qfr-Qfilter-textX), Default: <leader>qkE
 Desc: Qfilter text (regex)

Modes: { n, x }, Plug: <Plug>(qfr-Qfilter!-textX), Default: <leader>qrE
 Desc: Qfilter! text (regex)

Modes: { n, x }, Plug: <Plug>(qfr-Lfilter-text), Default: <leader>lke
 Desc: Lfilter text (vimcase)

Modes: { n, x }, Plug: <Plug>(qfr-Lfilter!-text), Default: <leader>lre
 Desc: Lfilter! text (vimcase)

Modes: { n, x }, Plug: <Plug>(qfr-Lfilter-textX), Default: <leader>lkE
 Desc: Lfilter text (regex)

Modes: { n, x }, Plug: <Plug>(qfr-Lfilter!-textX), Default: <leader>lrE
 Desc: Lfilter! text (regex)

Modes: { n, x }, Plug: <Plug>(qfr-Qfilter-lnum), Default: <leader>qkn
 Desc: Qfilter lnum (vimcase)

Modes: { n, x }, Plug: <Plug>(qfr-Qfilter!-lnum), Default: <leader>qrn
 Desc: Qfilter! lnum (vimcase)

Modes: { n, x }, Plug: <Plug>(qfr-Qfilter-lnumX), Default: <leader>qkN
 Desc: Qfilter lnum (regex)

Modes: { n, x }, Plug: <Plug>(qfr-Qfilter!-lnumX), Default: <leader>qrN
 Desc: Qfilter! lnum (regex)

Modes: { n, x }, Plug: <Plug>(qfr-Lfilter-lnum), Default: <leader>lkn
 Desc: Lfilter lnum (vimcase)

Modes: { n, x }, Plug: <Plug>(qfr-Lfilter!-lnum), Default: <leader>lrn
 Desc: Lfilter! lnum (vimcase)

Modes: { n, x }, Plug: <Plug>(qfr-Lfilter-lnumX), Default: <leader>lkN
 Desc: Lfilter lnum (regex)

Modes: { n, x }, Plug: <Plug>(qfr-Lfilter!-lnumX), Default: <leader>lrN
 Desc: Lfilter! lnum (regex)

Modes: { n, x }, Plug: <Plug>(qfr-Qfilter-type), Default: <leader>qkt
 Desc: Qfilter type (vimcase)

Modes: { n, x }, Plug: <Plug>(qfr-Qfilter!-type), Default: <leader>qrt
 Desc: Qfilter! type (vimcase)

Modes: { n, x }, Plug: <Plug>(qfr-Qfilter-typeX), Default: <leader>qkT
 Desc: Qfilter type (regex)

Modes: { n, x }, Plug: <Plug>(qfr-Qfilter!-typeX), Default: <leader>qrT
 Desc: Qfilter! type (regex)

Modes: { n, x }, Plug: <Plug>(qfr-Lfilter-type), Default: <leader>lkt
 Desc: Lfilter type (vimcase)

Modes: { n, x }, Plug: <Plug>(qfr-Lfilter!-type), Default: <leader>lrt
 Desc: Lfilter! type (vimcase)

Modes: { n, x }, Plug: <Plug>(qfr-Lfilter-typeX), Default: <leader>lkT
 Desc: Lfilter type (regex)

Modes: { n, x }, Plug: <Plug>(qfr-Lfilter!-typeX), Default: <leader>lrT
 Desc: Lfilter! type (regex)

Modes: { n }, Plug: <Plug>(qfr-qf-prev), Default: [q
 Desc: Go to a previous qf entry

Modes: { n }, Plug: <Plug>(qfr-qf-next), Default: ]q
 Desc: Go to a later qf entry

Modes: { n }, Plug: <Plug>(qfr-qf-rewind), Default: [Q
 Desc: Go to the first qf entry

Modes: { n }, Plug: <Plug>(qfr-qf-last), Default: ]Q
 Desc: Go to the last qf entry

Modes: { n }, Plug: <Plug>(qfr-qf-pfile), Default: [<C-q>
 Desc: Go to the previous qf file

Modes: { n }, Plug: <Plug>(qfr-qf-nfile), Default: ]<C-q>
 Desc: Go to the next qf file

Modes: { n }, Plug: <Plug>(qfr-ll-prev), Default: [l
 Desc: Go to a previous loclist entry

Modes: { n }, Plug: <Plug>(qfr-ll-next), Default: ]l
 Desc: Go to a later loclist entry

Modes: { n }, Plug: <Plug>(qfr-ll-rewind), Default: [L
 Desc: Go to the first loclist entry

Modes: { n }, Plug: <Plug>(qfr-ll-last), Default: ]L
 Desc: Go to the last loclist entry

Modes: { n }, Plug: <Plug>(qfr-ll-pfile), Default: [<C-l>
 Desc: Go to the previous loclist file

Modes: { n }, Plug: <Plug>(qfr-ll-nfile), Default: ]<C-l>
 Desc: Go to the next loclist file

Modes: { n }, Plug: <Plug>(qfr-qsort-fname-asc), Default: <leader>qtf
 Desc: Qsort by fname asc

Modes: { n }, Plug: <Plug>(qfr-qsort-fname-desc), Default: <leader>qtF
 Desc: Qsort by fname desc

Modes: { n }, Plug: <Plug>(qfr-qsort-fname-diag-asc), Default: <leader>qtif
 Desc: Qsort by fname_diag asc

Modes: { n }, Plug: <Plug>(qfr-qsort-fname-diag-desc), Default: <leader>qtiF
 Desc: Qsort by fname_diag desc

Modes: { n }, Plug: <Plug>(qfr-qsort-severity-asc), Default: <leader>qtis
 Desc: Qsort by severity asc

Modes: { n }, Plug: <Plug>(qfr-qsort-severity-desc), Default: <leader>qtiS
 Desc: Qsort by severity desc

Modes: { n }, Plug: <Plug>(qfr-qsort-text-asc), Default: <leader>qte
 Desc: Qsort by text asc

Modes: { n }, Plug: <Plug>(qfr-qsort-text-desc), Default: <leader>qtE
 Desc: Qsort by text desc

Modes: { n }, Plug: <Plug>(qfr-qsort-type-asc), Default: <leader>qtt
 Desc: Qsort by type asc

Modes: { n }, Plug: <Plug>(qfr-qsort-type-desc), Default: <leader>qtT
 Desc: Qsort by type desc

Modes: { n }, Plug: <Plug>(qfr-lsort-fname-asc), Default: <leader>ltf
 Desc: Lsort by fname asc

Modes: { n }, Plug: <Plug>(qfr-lsort-fname-desc), Default: <leader>ltF
 Desc: Lsort by fname desc

Modes: { n }, Plug: <Plug>(qfr-lsort-fname-diag-asc), Default: <leader>ltif
 Desc: Lsort by fname_diag asc

Modes: { n }, Plug: <Plug>(qfr-lsort-fname-diag-desc), Default: <leader>ltiF
 Desc: Lsort by fname_diag desc

Modes: { n }, Plug: <Plug>(qfr-lsort-severity-asc), Default: <leader>ltis
 Desc: Lsort by severity asc

Modes: { n }, Plug: <Plug>(qfr-lsort-severity-desc), Default: <leader>ltiS
 Desc: Lsort by severity desc

Modes: { n }, Plug: <Plug>(qfr-lsort-text-asc), Default: <leader>lte
 Desc: Lsort by text asc

Modes: { n }, Plug: <Plug>(qfr-lsort-text-desc), Default: <leader>ltE
 Desc: Lsort by text desc

Modes: { n }, Plug: <Plug>(qfr-lsort-type-asc), Default: <leader>ltt
 Desc: Lsort by type asc

Modes: { n }, Plug: <Plug>(qfr-lsort-type-desc), Default: <leader>ltT
 Desc: Lsort by type desc

Modes: { n }, Plug: <Plug>(qfr-qf-older), Default: <leader>q[
 Desc: Go to an older qflist

Modes: { n }, Plug: <Plug>(qfr-qf-newer), Default: <leader>q]
 Desc: Go to a newer qflist

Modes: { n }, Plug: <Plug>(qfr-qf-history), Default: <leader>qQ
 Desc: View or jump within the quickfix history

Modes: { n }, Plug: <Plug>(qfr-qf-history-open), Default: <leader>q<C-q>
 Desc: Open and jump within the quickfix history

Modes: { n }, Plug: <Plug>(qfr-qf-del), Default: <leader>qe
 Desc: Delete a list from the quickfix stack

Modes: { n }, Plug: <Plug>(qfr-qf-del-all), Default: <leader>qE
 Desc: Delete all items from the quickfix stack

Modes: { n }, Plug: <Plug>(qfr-ll-older), Default: <leader>l[
 Desc: Go to an older location list

Modes: { n }, Plug: <Plug>(qfr-ll-newer), Default: <leader>l]
 Desc: Go to a newer location list

Modes: { n }, Plug: <Plug>(qfr-ll-history), Default: <leader>lL
 Desc: View or jump within the loclist history

Modes: { n }, Plug: <Plug>(qfr-ll-history-open), Default: <leader>l<C-l>
 Desc: Open and jump within the loclist history

Modes: { n }, Plug: <Plug>(qfr-ll-del), Default: <leader>le
 Desc: Delete a list from the loclist stack

Modes: { n }, Plug: <Plug>(qfr-ll-del-all), Default: <leader>lE
 Desc: Delete all items from the loclist stack

vim:tw=78:ts=8:noet:ft=help:norl:
