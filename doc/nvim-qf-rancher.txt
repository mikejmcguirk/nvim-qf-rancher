==============================================================================
Error list husbandry                                       *nvim-qf-rancher.txt*

Nvim Quickfix Rancher provides a stable of tools for taming the quickfix
and location lists:
- Auto opening, closing, and resizing of list windows at logical points
  and across tabpages
- Wrapping and convenience functions for list and stack navigation
- Autocommands to stop automatic copying of location lists to new windows,
  as well as putting location lists without a home window out to pasture
- Preview window for list items
- Built-in functions for lassoing diagnostics by all severities, including
  highest only
- Filter and sort functions
- A variey of grep functions built on rg as a default, with grep available
  as a backup
- Capabilities are extensible and available from the cmd line

==============================================================================
Installation                                           *qf-rancher-installation*

==============================================================================
Configuration                                                       *qfr-config*

Qfr is configured using vim.g variables. For lazy.nvim users, make sure to
set thse in the "init" section of your plugin spec

qfr_auto_center_result                                  *qfr_auto_center_result*

    (Default true) Qfr commands will auto-center opened buffers

    Type: ~
        string


qfr_auto_open_changes                                    *qfr_auto_open_changes*

    (Default true) Always open the list when its contents are changed

    Type: ~
        boolean


qfr_auto_list_height                                      *qfr_auto_list_height*

    (Default true) When the list is opened, its contents changed, or the
    stack number changed, re-size it to match the amount of entries. Max
    automatic height is 10

    Type: ~
        boolean


qfr_close_on_stack_clear                              *qfr_close_on_stack_clear*

    (Default true) Automatically close the list if the entire stack is cleared

    Type: ~
        boolean


qfr_create_loclist_autocmds                        *qfr_create_loclist_autocmds*

    (Default true) On startup, create autocmds to manage the following:
    - Prevent split windows from inheriting the original window's location
      list
    - When a non-list window is closed, automatically close and clear its
      associated location lists
    These autocmds are contained in the augroup "qfr-loclist-group"

    Type: ~
        boolean


qfr_debug_assertions                                      *qfr_debug_assertions*

    (Default false) Enables extra type checking and logical assertions. This
    can affect performance, as individual list items will have extra
    validation

    Type: ~
        boolean


qfr_save_views                                                  *qfr_save_views*

    (Default true) Save views of other windows in the same tab when
    the list is open, closed, or resized. This option is ignored if
    splitkeep is set for screen or topline

    Type: ~
        boolean


Qf Rancher provides a qf.lua ftplugin file to customize list behavior
TODO: ref ftplugin section
Customize which ftplugin features to use with the options below

qfr_ftplugin_demap                                          *qfr_ftplugin_demap*

    (Default true) Disable the following defaults in lists:
    - <C-w>s (split)
    - <C-w>v (vsplit)
    - <C-i> / <C-o> (jumplist navigation)

    Type: ~
        boolean


qfr_ftplugin_keymap                                        *qfr_ftplugin_keymap*

    (Default true) Set ftplugin list keymaps
    TODO: Reference ftplugin section
    TODO: Note that these are the ack style maps + other lineage

    Type: ~
        boolean


qfr_ftplugin_set_opts                                    *qfr_ftplugin_set_opts*

    (Default true) Set the following options in lists:
    - buflisted = false
    - colorcolumn = ""
    - list = false
    - spell = false

    Type: ~
        boolean


qfr_grepprg                                                        *qfr_grepprg*

    (Default "rg") Set the grepprg used for Rancher's grep functions
    "rg" and "grep" are available

    Type: ~
        string


Control the preview window with the options below
TODO: link to preview win section

qfr_preview_border                                          *qfr_preview_border*

    (Default "single") Set the preview window border. See :h 'winborder' for
    more info

    Variants: ~
        ("")
        ("bold")
        ("double")
        ("none")
        ("rounded")
        ("shadow")
        ("single")
        ("solid")
        ("An eight element string[] table")


qfr_preview_debounce                                      *qfr_preview_debounce*

    (Default 100) Minimum interval in ms between preview window updates
    The default is 100 to accomodate slower systems/HDs. On a reasonable
    system, it should be possible to go down to 50ms before flicker/stutter
    start to appear. This behavior also depends on the size of the file(s)
    being scrolled through

    Type: ~
        string


qfr_preview_show_title                                  *qfr_preview_show_title*

    (Default true) Show title in the preview window

    Type: ~
        string


qfr_preview_title_pos                                    *qfr_preview_title_pos*

    (Default "left") If show_title is true, control where it shows

    Type: ~
        string


qfr_preview_winblend                                      *qfr_preview_winblend*

    (Default 0) Set the winblend of the preview win (see :h winblend)

    Type: ~
        integer


qfr_qfsplit                                                        *qfr_qfsplit*

    (Default "botright") Set the split the quickfix list opens to

    Variants: ~
        ("aboveleft")
        ("belowright")
        ("topleft")
        ("botright")


qfr_reuse_title                                                *qfr_reuse_title*

    (Default true) When running a Qfr cmd to gather new entries, look for
    destination lists to re-use based on title

    Type: ~
        boolean


qfr_set_default_cmds                                      *qfr_set_default_cmds*

    (Default true) Create Qfr's default commands

    Type: ~
        boolean


qfr_set_default_maps                                      *qfr_set_default_maps*

    (Default true) Set default keymaps (excluding ftplugin maps)
    TODO: link to default keymaps section

    Type: ~
        string


==============================================================================
Qfr Window Controls                                 *qf-rancher-window-controls*


Modes: { n }, Plug: <Plug>(qfr-open-qf-list), Default: <leader>qp
 Desc: Open the quickfix list to [count] height (focus if already open)

Modes: { n }, Plug: <Plug>(qfr-open-qf-list-max), Default: <leader>qP
 Desc: Open the quickfix list to max height

Modes: { n }, Plug: <Plug>(qfr-close-qf-list), Default: <leader>qo
 Desc: Close the quickfix list

Modes: { n }, Plug: <Plug>(qfr-toggle-qf-list), Default: <leader>qq
 Desc: Toggle the quickfix list (count sets height on open)

Modes: { n }, Plug: <Plug>(qfr-open-loclist), Default: <leader>lp
 Desc: Open the location list to [count] height (focus if already open)

Modes: { n }, Plug: <Plug>(qfr-open-loclist-max), Default: <leader>lP
 Desc: Open the location list to max height

Modes: { n }, Plug: <Plug>(qfr-close-loclist), Default: <leader>lo
 Desc: Close the location list

Modes: { n }, Plug: <Plug>(qfr-toggle-loclist), Default: <leader>ll
 Desc: Toggle the location list (count sets height on open)

Cmd: Qopen
Desc: Open the quickfix list to [count] height (focus if already open)

Cmd: Qclose
Desc: Close the Quickfix list

Cmd: Qtoggle
Desc: Toggle the quickfix list (count sets height on open)

Cmd: Lopen
Desc: Open the location list to [count] height (focus if already open)

Cmd: Lclose
Desc: Close the location List

Cmd: Ltoggle
Desc: Toggle the location list (count sets height on open)

==============================================================================
Open, close, and resize list wins                                       *Window*

QfrListOpenOpts                                                *QfrListOpenOpts*

    Fields: ~
        {height?}       (integer) Height the list should be set to
        {keep_win?}     (boolean) Stay in current window when opening the list?
        {nop_if_open?}  (boolean) Do not print messages or focus on the list win


Window.open_qflist({opts})                                  *Window.open_qflist*
    - If any location lists are open in the same tabpage, they will be
      automatically closed before the qflist is opened
    - If the quickfix list is already open, it will be focused
    - If a height is provided, and "nop_if_open" is not true, the qflist will
      be resized regardless of whether or not it is already open

    Parameters: ~
        {opts}  (QfrListOpenOpts)

    Returns: ~
        (boolean)


Window.open_loclist({src_win}, {opts})                     *Window.open_loclist*
    - If no location list is present for the source window, the function will
      exit
    - If the quickfix list is open in the same tabpage, it will be closed
      before the location list is opened
    - If the location list is already open, it will be focused
    - If a height is provided, and "nop_if_open" is not true, the location
      list will be resized regardless of whether or not it is already open

    Parameters: ~
        {src_win}  (integer) Location list window context
        {opts}     (QfrListOpenOpts)

    Returns: ~
        (boolean)


Window.close_qflist()                                      *Window.close_qflist*
    - If switchbuf contains uselast, focus will be changed to the alternate
      window if it is available

    Returns: ~
        (boolean)


Window.close_loclist({src_win})                           *Window.close_loclist*
    -If switchbuf contains uselast, focus will be changed to the alternate
     window if it is available
    - All location list windows sharing a |quickfix-ID| with the current
      window context will also be closed

    Parameters: ~
        {src_win}  (integer) Location list window context

    Returns: ~
        (boolean)


Window._toggle_qflist({opts})                            *Window._toggle_qflist*
    opts.nop_if_open will be automatically set to true

    Parameters: ~
        {opts}  (QfrListOpenOpts)

    Returns: ~
        (nil)


                                                        *Window._toggle_loclist*
Window._toggle_loclist({src_win}, {opts})
    opts.nop_if_open will be automatically set to true

    Parameters: ~
        {src_win}  (integer)
        {opts}     (QfrListOpenOpts)

    Returns: ~
        (nil)


Window.open_qflist_cmd({cargs})                         *Window.open_qflist_cmd*
    Callback function for mapping quickfix open to a command. Expects
    count = 0 in the user_command table

    Parameters: ~
        {cargs}  (vim.api.keyset.create_user_command.command_args)

    Returns: ~
        (nil)


Window.open_loclist_cmd({cargs})                       *Window.open_loclist_cmd*
    Callback function for mapping loclist open to a command. Expects
    count = 0 in the user_command table

    Parameters: ~
        {cargs}  (vim.api.keyset.create_user_command.command_args)

    Returns: ~
        (nil)


Window.close_qflist_cmd()                              *Window.close_qflist_cmd*
    Callback function to map qflist close to a command

    Returns: ~
        (nil)


Window.close_loclist_cmd()                            *Window.close_loclist_cmd*
    Callback function to map loclist close to a command

    Returns: ~
        (nil)


Window.toggle_qflist_cmd({cargs})                     *Window.toggle_qflist_cmd*
    Callback function to map qflist toggle to a command. Expects count = 0
    in the user_command table

    Parameters: ~
        {cargs}  (vim.api.keyset.create_user_command.command_args)

    Returns: ~
        (nil)


Window.toggle_loclist_cmd({cargs})                   *Window.toggle_loclist_cmd*
    Callback function to map loclist toggle to a command. Expects count = 0
    in the user_command table

    Parameters: ~
        {cargs}  (vim.api.keyset.create_user_command.command_args)

    Returns: ~
        (nil)


vim:tw=78:ts=8:noet:ft=help:norl:
